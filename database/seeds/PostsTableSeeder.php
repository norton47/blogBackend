<?php

use Illuminate\Database\Seeder;

class PostsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::table('posts')->insert([
            [
                'id' => 1,
                'category_id' => 1,
                'name' => 'Встреча любителей больших данных и искусства',
                'description' => 'Во вторник, 29 ноября 2016 года DI Telegraph и Data-Centric Alliance проведут митап Art of Science.',
                'content' => json_encode('{text: "Art of Science – мероприятие, посвященное анализу данных в искусстве. Наука и искусство – что их связывает? Возможно ли взаимодействие этих двух разных миров? Можно ли с помощью big data, нейронных сетей и методов машинного обучения создавать что-то полезное и прекрасное? Как наука о данных может помочь в решении задач современного искусства? Об этом и многом другом расскажут наши спикеры, представители мира технологического «искусства»."}'
                    , JSON_UNESCAPED_UNICODE)
            ],
            [
                'id' => 2,
                'category_id' => 1,
                'name' => 'Как остановить отток людей с онлайн-курса ',
                'description' => 'Онлайн-курсы, кроме своей удобности и доступности, славятся тем, что на них необычайно легко забивать, что с успехом и делают многие слушатели. Забивать слушателям случается по самым разным причинам — непонятен курс, пропущен дедлайн, не успел набрать баллы, вышел Fallout 4 – у всех свои оправдания. А вот у нас оправданий быть не может: если человек покидает курс, мир теряет потенциального разработчика или специалиста по анализу данных, а ещё киловатт-часы и затраченное нашим героем время.',
                'content' => json_encode('{text: "Поскольку вопрос ухода пользователя не определен однозначно, и никто никогда точно не может предсказать реальный исход, на помощь приходят методы машинного обучения.
Обычно, про применение методов машинного обучения для предсказания оттока мы слышим в контексте всяческих банков и телекома. Аналогично, подобные проблемы возникают и у образовательных проектов
"}'
                    , JSON_UNESCAPED_UNICODE)
            ],
            [
                'id' => 3,
                'category_id' => 1,
                'name' => 'SQL: пара приемов в SELECT-запросах',
                'description' => 'Тестирование новых функций часто проводят на данных, взятых с уже функционирующей системы. В этом случае тестировщикам порою приходится строить запросы для хитрых случаев. Например, нужно протестировать новую функциональность интернет-магазина, причём играют роль интервалы между покупками. Нам доступны данные с работающей версии — можно загрузить их на тестовый стенд и проверить работу новой версии продукта.',
                'content' => json_encode('{text: "Для выбора интересных нам пользовательских аккаунтов нужно сопоставить максимальные интервалы между покупками у разных пользователей.
От тестировщика требуется построить SQL-запрос, выдающий N пользователей, у которых интервалы между датами заказов будут наибольшими. 
Аналогичные задачи и их разбор — под катом.
Речь идет о поиске последовательностей записей/интервалов стандартными средствами SQL. Агрегатные функции обрабатывают все данные, попадающие в условие выборки, и поэтому только ими обойтись нельзя."}'
                    , JSON_UNESCAPED_UNICODE)
            ],
        ]);
    }
}
